Initialization:
    specify path to: input_folder
    specify path to: output_folder
    choose Verilog
    choose UCF

    UCF Rules:
        note: rules can be modified in the future as needed
        - no syntax error in UCF files
        - only use NOR/NOT gates
            - NOR = 2 inputs ; NOT = 1 input
        eval function params: 
            - input_response : ymax, ymin, STATE = range between ymax and ymin
            - gate hill_response : any parameters, but x = input_composition
            - gate input_composition : any paremeters, need x (input score[s])
            - output unit_conversion : c, x = input score
        check for number of inputs, outputs, and gates available in UCF

    Logic Synthesis (yosys):
        generate netlist from Verilog using yosys, get a json file for netlist
        convert netlist_json & store as graph representation
        Netlist Rules:
            - only single-bit nodes in Netlist
            - only NOR/NOT gates
            - all nodes are used/connected in netlist
            - intermediate output in netlist OK
            - netlist inputs/outputs/gates number <= UCF availablity
        
IF Initialization is SUCCESS:
    count total number of possible permuations for netlist, matched with assignments from UCF:
        note: only permute gate_groups, and test individual gates in each group in Score_Circuit()
        permuations = (I)P(i) * (O)P(o) * (G)P(g), where A=UCF, a:netlist
    if permuations < (threshold==100,000):
        run exhaustive_assignment algorithm:
            for each permuation:
                Score_Circuit(permutation)
            return best assignment
    else:
        exhaustive_assign will take too long,
        run simulation algorithm instead - genetic_algorithm (note: need to wrap up this function):
            initial_population = 20 random permutations
            num_generations = int(x>=100)
            mutation_rate = float(0<x<=0.2)
            for each generation in num_generations:
                scores = list: Score_Circuit(permuation) for each permuation in initial_population
                parents = find highest scores from scores
                offsprings = generate_offspring(parents, mutation)
                add offsprings to population
                randomly mutate part of the rest of population
                select 20 best permuations from population
                repeat
            return best assignment from population
    (NOTE: exhaustive_assign will return the definitive best assignment, genetic_algorithm might return slightly varying results)

FUNCTION: Score_Circuit(graph):
    for each output (doesn't matter if multiple or single):
        recursively score the nodes connected to the output
            (calling score_circuit() on the gates, intermediate outputs, and inputs, combining and calculating their values)
    note: returns the lowest output value for the circuit, as long as it is not an intermediate output
    return the (min_output_score, output_device_name)

